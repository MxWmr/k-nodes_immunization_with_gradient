import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import EoN
import random as rd
import retworkx as rx


def von_mises(A, vector =False, eps =0.1, itemax =100):
    # Ideally choose a random vector
    # To decrease the chance that our vector
    # Is orthogonal to the eigenvector
    b_k = np.random.rand(A.shape[0])

    b_k1_norm = np.linalg.norm(b_k)
    v=0
    ite=0
    while abs(v-b_k1_norm)>eps and ite<itemax:
        v = b_k1_norm

        # calculate the matrix-by-vector product Ab
        b_k1 = A.dot(b_k)


        # calculate the norm
        b_k1_norm = np.linalg.norm(b_k1,ord=2)

        # re normalize the vector

        b_k = 1/(b_k1_norm+0.001)*b_k1

        ite+=1

    r_spec = (b_k.T).dot(A.dot(b_k))/(np.dot(b_k.T,b_k)+0.0001)

    if vector :
        return r_spec,b_k
    else:
        return r_spec


## Measure of vulnerability using spectral radius
def max_ev(G=None,A=None,vector=False):
    if A is None:
        A = rx.adjacency_matrix(G)
    r_spec = von_mises(A,vector)
    return r_spec


 # give an estimation of the proportion of infected nodes with an SIR model through percolation
def perco_estim(G, n_estim=1):
    for k in range(n_estim):
        PE, AR = EoN.estimate_SIR_prob_size(G, 0.3)
    return PE


def mean_field(G):
    ## to build ##
    return G


# to avoid !
# realize va simulation to assess the vaccination scheme
def simu_mes(G,tau =0.3, gamma =1., n_inf =10, n_sim =1):

    R_last=0
    for j in range(n_sim):
        infected = rd.sample(G.nodes,n_inf)
        t, S, I, R = EoN.fast_SIR(G, tau, gamma,
                            initial_infecteds = infected)
        R_last+=R[-1]

    return R_last/(S[0]+len(infected))/n_sim


